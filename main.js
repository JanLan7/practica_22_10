alert("Este es el contenido teorico de Javascript clase 2 üòé");
    alert("¬øQu√© √≠tem quer√©s estudiar ü§ì?");
    let continuar = true;

    while (continuar) {
        let mensaje = Number(prompt("Fundamentos de Javascript\n1. Condicionales y Operadores\n2.Operadores en Detalle"));

        switch (mensaje) {
            case 1:
                alert("Condicionales y Operadores\nFundamento de Condicionales\nIntroducci√≥n\nLos condicionales en JavaScript son estructuras fundamentales que permiten tomar decisiones en un programa bas√°ndose en si una o m√°s condiciones se cumplen. Al igual que en la vida real, donde tomamos decisiones basadas en diferentes situaciones, los condicionales nos permiten ejecutar distintas partes de c√≥digo dependiendo de ciertas condiciones l√≥gicas.");
                alert("Estructura B√°sica del if\nLa estructura b√°sica del if en JavaScript se utiliza para ejecutar un bloque de c√≥digo solo si una condici√≥n espec√≠fica es verdadera. Por ejemplo:\nif (condici√≥n) {C√≥digo a ejecutar si la condici√≥n es verdadera}");
                alert("Si la condici√≥n evaluada dentro del if resulta en true, el bloque de c√≥digo asociado se ejecutar√°. De lo contrario, se omitir√°.")
                alert("Uso de else y else if\nPara manejar m√∫ltiples condiciones, podemos extender el uso del if con else y else if. El else permite ejecutar un bloque de c√≥digo cuando la condici√≥n del if es falsa. Por ejemplo:\nif (condici√≥n) {// C√≥digo si la condici√≥n es verdadera} else {// C√≥digo si la condici√≥n es falsa}")
                alert("Cuando hay m√∫ltiples posibles condiciones que queremos evaluar, podemos usar else if para definir condiciones adicionales:\nif (condici√≥n1) {// C√≥digo si condici√≥n1 es verdadera} else if (condici√≥n2) {// C√≥digo si condici√≥n2 es verdadera} else {// C√≥digo si ninguna de las condiciones anteriores es verdadera}")
                alert("Ejemplos Pr√°cticos\nConsideremos un ejemplo simple para determinar si un estudiante aprueba o no un examen:")
                alert("let calificacion = 75;\nif (calificacion >= 90) {console.log('Excelente');} else if (calificacion >= 70) {console.log('Bueno');} else {console.log('Necesitas estudiar m√°s');}")
                alert("Conclusi√≥n\nLos condicionales son herramientas poderosas en JavaScript que ayudan a dirigir el flujo de un programa. Aprendiendo a utilizar adecuadamente if, else, y else if, se puede controlar c√≥mo se ejecuta el c√≥digo en diferentes circunstancias, haciendo posible la creaci√≥n de programas m√°s din√°micos y reactivos a las condiciones de entrada.")
                break;
            case 2:
               alert("Operadores L√≥gicos y de Comparaci√≥n en JavaScript\nIntroducci√≥n\nEn JavaScript, los operadores l√≥gicos y de comparaci√≥n son herramientas esenciales que permiten evaluar condiciones y comparar valores. Estos operadores son fundamentales para controlar el flujo de ejecuci√≥n en programas a trav√©s de estructuras condicionales como if, else, y bucles como while y for.");
               alert("Operadores de Comparaci√≥n\nLos operadores de comparaci√≥n eval√∫an dos valores y retornan un valor booleano (true o false) dependiendo de si la comparaci√≥n es verdadera.");
               alert("== (Igual): Compara si dos valores son iguales, ignorando el tipo de dato.\njsx console.log(2 == '2'); // true\n=== (Estrictamente igual): Compara si dos valores son iguales y del mismo tipo.\njsx console.log(2 === '2'); // false\n!= (No igual): Compara si dos valores no son iguales, ignorando el tipo de dato.\njsx console.log(2 != '3'); // true\n!== (Estrictamente no igual): Compara si dos valores no son iguales o no son del mismo tipo.\njsx console.log(2 !== '2'); // true\n<, <=, >, >= (Menor que, Menor o igual que, Mayor que, Mayor o igual que): Utilizados para comparaciones num√©ricas.\njsx console.log(3 < 4); // true console.log(5 >= 5); // true")
               alert("Operadores L√≥gicos\nLos operadores l√≥gicos se usan para combinar m√∫ltiples condiciones booleanas.\n&& (AND): Retorna true si ambos operandos son verdaderos.\njsx console.log(true && false); // false\n|| (OR): Retorna true si al menos uno de los operandos es verdadero.\njsx console.log(true || false); // true! (NOT): Invierte el valor booleano del operando.\njsx console.log(!true); // false")
               alert("Ejemplos Pr√°cticos\nVeamos c√≥mo estos operadores pueden ser usados en situaciones comunes:")
               alert("let edad = 20;\nlet acceso = (edad >= 18) && (edad <= 30);\nconsole.log(acceso); // true si la edad est√° entre 18 y 30")
               alert("En el ejemplo anterior, el operador && se utiliza para asegurar que ambas condiciones sobre la variable edad sean verdaderas para permitir el acceso.")
               alert("let temperatura = 35;\nlet advertencia = (temperatura < 0) || (temperatura > 32);\nconsole.log(advertencia); // true si la temperatura es menor que 0 o mayor que 32")
               alert("Aqu√≠, el operador || permite generar una advertencia si alguna de las condiciones clim√°ticas es extrema.Conclusi√≥n\nEntender los operadores l√≥gicos y de comparaci√≥n en JavaScript es crucial para manipular el flujo de decisiones en un programa, permitiendo a los desarrolladores escribir c√≥digo m√°s flexible y robusto. Estos operadores, combinados con estructuras de control, ofrecen una poderosa herramienta para manejar la l√≥gica de las aplicaciones.")

                break;
            case 3:
               alert("")
                break;
                
            case 4:
                alert("")
                break;
           
            default:
                alert("Opci√≥n no v√°lida üòÖ. prob√° un n√∫mero del 1 al 4.");
                break;
        }

        continuar = confirm("¬øQueres estudiar otro √≠tem? üë®‚Äçüè´");
    }

    alert("No te desanimesüòÅ! Fuerza üí™");